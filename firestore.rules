/// # Deploy just the rules
/// firebase deploy --only firestore:rules

/// # Or deploy everything
/// firebase deploy

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // Work history
    match /users/{userId}/workHistory/{sessionId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // Patients
    match /patients/{patientId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }

    // ═══════════════════════════════════════════════════════════════════
    // 🕒 SHIFT SCHEDULING SYSTEM
    // ═══════════════════════════════════════════════════════════════════

    match /shifts/{shiftId} {
      // Any authenticated user can read shift data
      allow read: if isAuthenticated();

      // Block all direct writes for now (manual via admin or test scripts)
      // allow write: if false; // comment out if testing
      allow write: if isAuthenticated();  // Allow writes for testing


      // In future, allow admins to create/edit shifts
      // allow write: if isAuthenticated() &&
      //   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Notifications
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isOwner(userId);
      allow update: if isOwner(userId);
      allow create, delete: if false;
    }

    // Gamification
    match /users/{userId}/xpHistory/{xpId} {
      allow read: if isOwner(userId);
      allow write: if false;
    }

    match /leaderboards/{boardId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // Preferences
    match /users/{userId}/preferences/{docId} {
      allow read, write: if isOwner(userId);
    }

    match /users/{userId}/settings/{docId} {
      allow read, write: if isOwner(userId);
    }

    // App config
    match /appConfig/{configId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    match /maintenance/{document} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // Subscription
    match /users/{userId}/subscriptions/{subId} {
      allow read: if isOwner(userId);
      allow write: if false;
    }

    match /pro_features/{docId} {
      allow read: if isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionTier == "pro";
      allow write: if false;
    }

    // Audit logs
    match /auditLogs/{logId} {
      allow read: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow write: if false;
    }

    // Catch-all: deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
